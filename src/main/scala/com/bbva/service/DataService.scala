package com.bbva.service

import akka.actor.{ActorRef, ActorSystem, Props}
import akka.http.scaladsl.model.StatusCodes
import akka.http.scaladsl.model.headers.RawHeader
import akka.http.scaladsl.server.Directives._
import akka.http.scaladsl.server.Route
import akka.pattern.ask
import akka.routing.FromConfig
import akka.util.Timeout
import com.bbva.actor.{ProducerActor, ProducerActorRabbit}
import com.bbva.model.{BulkLog, BulkResponse, IdElement, LogResponse}
import com.rabbitmq.client.ConnectionFactory
import com.typesafe.config.Config

import scala.concurrent.Await
import scala.concurrent.duration._

/**
  * Message to sent to Kafka.
  *
  * @param topic   Destination topic.
  * @param id      MessageId autogenerated.
  * @param message Message body.
  */
case class Message(topic: String, id: String, message: String)

case class SyncMessage(topic: String, id: String, message: String)

case class DataService(system: ActorSystem, rabbitFactory: ConnectionFactory)
                      (implicit val config: Config) {

  implicit val timeout = Timeout(5 seconds)
  val actortype = config.getString("akka.actortype")

  def getKafkaRouter(): ActorRef ={
    system.actorOf(FromConfig.props(Props[ProducerActor]), "mainRouter")
  }

  def getRabbitRouter(): ActorRef ={
    system.actorOf(FromConfig.props(
      Props(classOf[ProducerActorRabbit],rabbitFactory,system)), "rabbitRouter")
  }

  val router = if(actortype=="rabbit") getRabbitRouter else getKafkaRouter

  val route: Route =
    pathPrefix("ingest") {
      path("healthCheck") {
        get {
          complete(StatusCodes.OK)
        }
      } ~ path("bulk") {
        pathEndOrSingleSlash {
          post {
            entity(as[List[BulkLog]]) { events =>
              val uuids = events.map(event =>
                sendLogToProducer(event.sourceSystem, event.message))
              bulkResponse("bulk", uuids)
            }
          }
        }
      } ~
        pathPrefix("single") {
          pathEndOrSingleSlash {
            post {
              entity(as[String]) { event =>
                val uuid = sendLogToProducer("data", event)
                logResponse("single", uuid)
              }
            }
          }
        }
    }

  def getTopicName(source: String): String = {
    config.getString("application.rabbitmq.exchange")
  }

  def sendLogToProducer(source: String, event: String) = {
    val newUUID = uuidGenerator
    router ! Message(getTopicName(source), newUUID, event)
    newUUID
  }

  def logResponse(path: String, newUUID: String) = {
    val headers = List(
      RawHeader("Content-Location", s"/ingest/$path")
    )
    respondWithHeaders(headers) {
      complete((StatusCodes.Accepted, LogResponse(IdElement(newUUID))))
    }
  }

  def bulkResponse(path: String, newUUIDs: List[String]) = {
    val headers = List(
      RawHeader("Content-Location", s"/ingest/$path")
    )
    respondWithHeaders(headers) {
      complete((StatusCodes.Accepted, BulkResponse(newUUIDs.map(IdElement(_)))))
    }
  }

  def uuidGenerator = java.util.UUID.randomUUID.toString

}
