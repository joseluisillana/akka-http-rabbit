<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.bbva</groupId>
    <artifactId>http-input-api</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-9</project.reporting.outputEncoding>
        <encoding>UTF-8</encoding>
        <scala.version>2.11.7</scala.version>
        <scala.compat.version>2.11</scala.compat.version>
        <junit.version>4.11</junit.version>
        <powermock.version>1.6.2</powermock.version>
        <mockito.version>1.10.19</mockito.version>
        <logback.version>1.1.7</logback.version>
        <typesafe.config.version>1.3.0</typesafe.config.version>
        <slf4j.version>1.7.20</slf4j.version>
        <spec2.version>2.3.12</spec2.version>
        <jackson.databind.version>2.6.3</jackson.databind.version>
        <scalatest.version>3.0.0</scalatest.version>
        <scalatestplus.version>1.5.0</scalatestplus.version>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <maven.compiler.plugin.version>3.5.1</maven.compiler.plugin.version>
        <akka.version>2.4.7</akka.version>
        <akka.http.cors.version>0.1.7</akka.http.cors.version>
        <jackson.scala.module.version>2.6.2</jackson.scala.module.version>
        <build.helper.maven.version>1.9.1</build.helper.maven.version>
        <javaversion>1.8</javaversion>
        <rabbitamqp.version>3.6.1</rabbitamqp.version>
        <rabbitamqp.scala.version>1.5</rabbitamqp.scala.version>
    </properties>

    <repositories>
        <repository>
            <id>sonatype snapshots</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
        </repository>
    </repositories>

    <dependencies>
        <!-- TYPESAFE CONFIG -->
        <!-- TO READ CONFIG AS JSON -->
        <dependency>
            <groupId>com.typesafe</groupId>
            <artifactId>config</artifactId>
            <version>${typesafe.config.version}</version>
        </dependency>

        <!-- RABBIT MQ -->
        <dependency>
            <groupId>com.rabbitmq</groupId>
            <artifactId>amqp-client</artifactId>
            <version>${rabbitamqp.version}</version>
        </dependency>
        <dependency>
            <groupId>com.github.sstone</groupId>
            <artifactId>amqp-client_${scala.compat.version}</artifactId>
            <version>${rabbitamqp.scala.version}</version>
        </dependency>

        <!-- SCALA -->
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <version>${scala.version}</version>
        </dependency>

        <!-- LOGGING -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>

        <!-- JSON PARSERS -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.databind.version}</version>
        </dependency>

        <!-- AKKA -->
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-actor_${scala.compat.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http-spray-json-experimental_${scala.compat.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http-core_${scala.compat.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-stream_${scala.compat.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>

        <!-- TESTING -->
        <dependency>
            <groupId>org.specs2</groupId>
            <artifactId>specs2_${scala.compat.version}</artifactId>
            <version>${spec2.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest_${scala.compat.version}</artifactId>
            <version>${scalatest.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.specs2</groupId>
            <artifactId>specs2-core_${scala.compat.version}</artifactId>
            <version>${spec2.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-testkit_${scala.compat.version}</artifactId>
            <version>${akka.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http-testkit_${scala.compat.version}</artifactId>
            <version>${akka.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-test</artifactId>
            <version>2.9.0</version>
            <scope>test</scope>
        </dependency>

        <!-- DEPENDENCY INJECTIONS -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>

        <!-- Third Parties -->
    </dependencies>


    <build>
        <sourceDirectory>src/main/scala</sourceDirectory>
        <testSourceDirectory>src/test/scala</testSourceDirectory>
        <plugins>

            <!--
                The Surefire Plugin is used during the test phase of the build lifecycle
                to execute the unit tests of an application.
                It generates reports in two different file formats:
                  Plain text files (*.txt)
                  XML files (*.xml)
            -->
            <!--
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18</version>
                <configuration> -->
            <!-- Skips unit tests if the value of skip.unit.tests property is true -->
            <!--<skipTests>true</skipTests>
            <argLine>-Duser.language=es -Duser.region=ES</argLine>-->
            <!-- Excludes integration tests when unit tests are run -->
            <!--<excludes>
                <exclude>**/IT*.java</exclude>
                <exclude>**/*IT.java</exclude>
                <exclude>**/IT*.scala</exclude>
                <exclude>**/*IT.scala</exclude>
            </excludes>
        </configuration>
    </plugin>
    -->

            <!--
                The Application Assembler Plugin is a Maven plugin for generating scripts
                for starting java applications.
                All dependencies and the artifact of the project itself are placed in a generated
                Maven repository in a defined assemble directory.
                All artifacts (dependencies + the artifact from the project) are added to the classpath
                in the generated bin scripts.
                Supported platforms:
                  Unix-variants
                  Windows NT (Windows 9x is NOT supported)
                  Java Service Wrapper (JSW)
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>appassembler-maven-plugin</artifactId>
                <version>1.10</version>
                <configuration>
                    <!-- Set the target configuration directory to be used in the bin scripts -->
                    <configurationDirectory>etc</configurationDirectory>

                    <!-- Set the name of the source directory for configuration files -->
                    <configurationSourceDirectory>src/main/resources/</configurationSourceDirectory>
                    <filterConfigurationDirectory>true</filterConfigurationDirectory>

                    <!-- Copy the contents from "/src/main/resources" to the target configuration
                        directory in the assembled application -->
                    <copyConfigurationDirectory>true</copyConfigurationDirectory>

                    <!-- Include the target configuration directory in the beginning of
                        the classpath declaration in the bin scripts -->
                    <includeConfigurationDirectoryInClasspath>true</includeConfigurationDirectoryInClasspath>

                    <extraJvmArguments></extraJvmArguments>
                    <!-- folder name and structure of the lib contents -->

                    <repositoryName>lib</repositoryName>
                    <repositoryLayout>default</repositoryLayout>

                    <!-- executable name and platform -->
                    <programs>
                        <program>
                            <mainClass>com.bbva.App</mainClass>
                            <name>App</name>
                        </program>
                    </programs>
                    <platforms>
                        <platform>unix</platform>
                    </platforms>
                </configuration>

                <!-- attach to package phase -->
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>assemble</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>


            <!--
               The Assembly Plugin for Maven is primarily intended to allow users to aggregate
               the project output along with its dependencies, modules, site documentation,
               and other files into a single distributable archive.

               Your project can build distribution "assemblies" easily, using one of the convenient,
               prefabricated assembly descriptors.

               These descriptors handle many common operations, such as packaging a project's artifact
               along with generated documentation into a single zip archive.

               Alternatively, your project can provide its own descriptor and assume a much higher level
               of control over how dependencies, modules, file-sets, and individual files
               are packaged in the assembly.

               Currently it can create distributions in the following formats:
                 zip
                 tar
                 tar.gz (or tgz)
                 tar.bz2 (or tbz2)
                 jar
                 dir
                 war
            -->
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.2.1</version>

                <executions>
                    <execution>
                        <id>make-full-assembly</id> <!-- this is used for inheritance merges -->
                        <phase>package</phase> <!-- append to the packaging phase. -->
                        <goals>
                            <goal>single</goal> <!-- goals -->
                        </goals>
                        <configuration>
                            <descriptors>
                                <descriptor>src/assembly/assembly.xml</descriptor>
                            </descriptors>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
              This plugin provides the ability to run Ant tasks from within Maven.
              You can even embed your Ant scripts in the POM!
            -->
            <!--
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.6</version>

                <executions>
                    <execution>
                        <id>patch.executable</id>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <exec executable="chmod" dir="${project.build.directory}/appassembler/bin">
                                    <arg value="a+x"/>
                                    <arg value="App"/>
                                </exec>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            -->

            <!-- Enable scalatest -->
            <!--
            <plugin>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest-maven-plugin</artifactId>
                <version>1.0</version>
                <configuration>
                    <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
                    <junitxml>.</junitxml>
                    <filereports>WDF TestSuite.txt</filereports>
                    <skipTests>true</skipTests>
                </configuration>
                <executions>
                    <execution>
                        <id>scala-test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>integration-test</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            -->


            <!--
              The scala-maven-plugin is used for compiling/testing/running/documenting scala code in maven.
            -->
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>testCompile</goal>
                        </goals>
                        <configuration>
                            <args>
                                <!--<arg>-make:transitive</arg>-->
                                <arg>-dependencyfile</arg>
                                <arg>${project.build.directory}/.scala_dependencies</arg>
                                <arg>-Xmax-classfile-name</arg>
                                <arg>140</arg>
                            </args>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
            T  he Compiler Plugin is used to compile the sources of your project
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.plugin.version}</version>
                <configuration>
                    <source>${javaversion}</source>
                    <target>${javaversion}</target>
                </configuration>
            </plugin>

            <!--
              Scalastyle, the scala CheckStyle.
              Checkstyle is well known in the Java world.
              Scalastyle is similar, but for Scala.
              Both tools help teams converge on a shared coding standard with automated control.
            -->
            <plugin>
                <groupId>org.scalastyle</groupId>
                <artifactId>scalastyle-maven-plugin</artifactId>
                <version>0.4.0</version>
                <configuration>
                    <verbose>false</verbose>
                    <failOnViolation>true</failOnViolation>
                    <includeTestSourceDirectory>true</includeTestSourceDirectory>
                    <failOnWarning>false</failOnWarning>
                    <sourceDirectory>${basedir}/src/main/scala</sourceDirectory>
                    <testSourceDirectory>${basedir}/src/test/scala</testSourceDirectory>
                    <configLocation>${basedir}/scalastyle_config.xml</configLocation>
                    <outputFile>${project.build.directory}/scalastyle-output.xml</outputFile>
                    <outputEncoding>UTF-8</outputEncoding>
                </configuration>
                <executions>
                    <execution>
                        <phase>verify</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>

        <!--
            Filters and resources. Both makes possible to replace values on config files.
        -->
        <filters>
            <!--
                Ensures that the config.properties file is always loaded from the
                configuration directory of the active Maven profile. 
            -->
            <filter>${user.dir}/profiles/local/config.properties</filter>
        </filters>
        <resources>
            <!--
                Placeholders that are found from the files located in the configured resource
                directories are replaced with the property values found from the profile
                specific configuration file.
            -->
            <resource>
                <filtering>true</filtering>
                <directory>src/main/resources</directory>
            </resource>
        </resources>
    </build>


    <profiles>
        <!-- The Configuration of the development profile -->
        <profile>
            <id>local</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <!--
                    Specifies the build.profile.id property that must be equal than the name of
                    the directory that contains the profile specific configuration file.
                    Because the name of the directory that contains the configuration file of the
                    development profile is dev, we must set the value of the build.profile.id
                    property to dev.
                -->
                <build.profile.id>local</build.profile.id>
                <!--
                    Only unit tests are run when the development profile is active
                -->
                <skip.integration.tests>true</skip.integration.tests>
                <skip.unit.tests>false</skip.unit.tests>
                <tag.scala.test.exclude>test.int</tag.scala.test.exclude>
            </properties>
        </profile>
    </profiles>
</project>
